# -*- coding: utf-8 -*-
"""Ajedrez de Fisher.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bjnU75IsBKKzH3TY3YxN-ykyJJYhx9Tn
"""

class ChessGame:
    def __init__(self):
        self.board = self.initialize_board()
        self.current_player = "White"
        self.game_over = False
        self.moves = []

    def initialize_board(self):
        board = [
            ["r", "n", "b", "q", "k", "b", "n", "r"],
            ["p", "p", "p", "p", "p", "p", "p", "p"],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            [" ", " ", " ", " ", " ", " ", " ", " "],
            ["P", "P", "P", "P", "P", "P", "P", "P"],
            ["R", "N", "B", "Q", "K", "B", "N", "R"]
        ]
        return board

    def print_board(self):
        for row in self.board:
            print(" ".join(row))

    def make_move(self, start_pos, end_pos):
        start_x, start_y = start_pos
        end_x, end_y = end_pos
        start_x, start_y = start_pos
        piece = self.board[start_x][start_y]

        # Verifica si es el turno del jugador
        if self.current_player == "White" and piece.islower():
            print("Invalid move. It's White's turn.")
            return False
        elif self.current_player == "Black" and piece.isupper():
            print("Invalid move. It's Black's turn.")
            return False

        # Verifica el movimiento del jugador
        if not self.is_valid_move(start_pos, end_pos):
            print("Invalid move.")
            return False

        # Actualiza el tablero
        self.board[end_x][end_y] = piece
        self.board[start_x][start_y] = " "

        # Cambia de 'turno'
        self.current_player = "Black" if self.current_player == "White" else "White"

        # Añade el movimiento a la lista
        self.moves.append((start_pos, end_pos))

        # Verifica si el juego a sido acabado
        

        return True

    def is_valid_move(self, start_pos, end_pos):
        
        return True


def main():
    game = ChessGame()

    while not game.game_over:
        game.print_board()

        # Get input from the current player
        start = input("Ingrese la posición de inicio (ejemplo, e2): ")
        end = input("Ingrese la posición de llegada (ejemplo, e4): ")

        start_pos = (ord(start[0]) - 97, int(start[1]) - 1)
        end_pos = (ord(end[0]) - 97, int(end[1]) - 1)

        game.make_move(start_pos, end_pos)


if __name__ == "__main__":
    main()